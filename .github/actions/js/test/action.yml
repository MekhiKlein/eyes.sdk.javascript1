name: JS Test
description: Test JS package
inputs:
  working-directory:
    description: the path to the directory from repository root
    type: string
    required: true
  framework-version:
    description: version of the framework
    type: string
  test-type:
    description: type of the testing (unit, it, e2e, coverage)
    type: string
  build-type:
    description: type of the build script
    type: string
  setup-type:
    description: type of the setup script
    type: string
  grep:
    description: grep pattern to filter tests
    type: string
  parallel:
    description: number of parallel processes to run tests
    type: number
  report:
    description: report level
    type: string
    default: sandbox
  shell:
    description: shell to use
    type: string
    default: bash

runs:
  using: composite
  steps:
    - name: Test
      shell: ${{inputs.shell}}
      working-directory: ${{inputs.working-directory}}
      env:
        MOCHA_GREP: ${{inputs.grep}}
        MOCHA_JOBS: ${{inputs.parallel}}
      run: |
        echo "::group::Configure NPM"
        npm install --global npm@9.6.7
        if [ "${{runner.os}}" = "Windows" ]; then npm --prefix=/ config set script-shell "C:\\Program Files\\Git\\bin\\bash.exe"; fi
        npm --prefix=/ config set audit false
        npm --prefix=/ config set fund false
        echo "::endgroup::"

        echo "::group::Installing dependencies"
        npm --prefix=../../ ci
        if [ ! -z "${{inputs.framework-version}}" ]
        then
          export APPLITOOLS_FRAMEWORK_VERSION=${{inputs.framework-version}}
          export APPLITOOLS_FRAMEWORK_MAJOR_VERSION=${{inputs.framework-version}}
          npm run upgrade:framework --if-present
        fi
        echo "::endgroup::"

        if [ "${{inputs.setup-type}}" != "none" ]
        then
          echo "::group::Setting up test environment"
          if [ ! -z "${{inputs.setup-type}}" ]; then npm run setup:${{inputs.setup-type}}; else npm run setup --if-present; fi
          echo "::endgroup::"
        fi

        if [ -e .env ]
        then
          echo "::group::Setting environment variables"
          set -o allexport
          source .env
          set +o allexport
          echo "::endgroup::"
        fi

        if [ "${{inputs.build-type}}" != "none" ]
        then
          echo "::group::Building package"
          npm --prefix=../../ run build -- --target=$PWD --type=${{inputs.build-type}} --with-deps
          echo "::endgroup::"
        fi

        echo "::group::Running tests"
        if [ ! -z "${{inputs.test-type}}" ]; then npm run test:${{inputs.test-type}}; else npm run test --if-present; fi
        echo "::endgroup::"

        echo "::group::Sending reports"
        if [ "${{inputs.report}}" = "sandbox" ]; then npm run report --if-present -- --sandbox; else npm run report --if-present; fi
        echo "::endgroup::"
